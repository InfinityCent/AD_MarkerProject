1+2
3+4
print('hello')
c = 10
for num in range(c):
install.packages("C:/Users/peree/Downloads/SDSFoundations_1.1.zip", repos = NULL, type = "win.binary")
install.packages("learnr")
dat <- rnorm(100)
hist(dat,main="")
summary(dat)
### Using R's built in plot command
plot(c(1,2,3))
plot(c(1,2,3), c(2,3,4))
#cosine curve
x=seq(from = 0, to = 20, by = 0.05)
x=cos(x)
plot(x)
#adding a title
plot(c(1,2,3), c(2,3,4), main="My plot")
#adding labels
plot(c(1,2,3), c(2,3,4), xlab="points 1", ylab="points 2")
#colours
colors()  #shows all the colours defined by default in R
plot(c(1,2,3), c(2,3,4), col = "red")
#point style
plot(c(1,2,3), c(2,3,4), pch = 19)
plot(c(1,2,3), c(2,3,4), pch = 19, cex = 2)  #point size
#line style
plot(c(1,2,3), c(2,3,4), type = "l")  #line plot
plot(c(1,2,3), c(2,3,4), type = "b")  #line + points
plot(c(1,2,3), c(2,3,4), type = "o")  #plot points on top of the line
#lty can range from 1 to 6
plot(c(1,2,3), c(2,3,4), type = "o", lty = 1)
#line style
plot(c(1,2,3), c(2,3,4), type = "l")  #line plot
#point style
plot(c(1,2,3), c(2,3,4), pch = 19)
plot(c(1,2,3), c(2,3,4), pch = 19, cex = 2)  #point size
#line style
plot(c(1,2,3), c(2,3,4), type = "l")  #line plot
### Using R's built in plot command
plot(c(1,2,3))
plot(c(1,2,3), c(2,3,4))
#cosine curve
x=seq(from = 0, to = 20, by = 0.05)
x=cos(x)
plot(x)
#adding a title
plot(c(1,2,3), c(2,3,4), main="My plot")
#adding labels
plot(c(1,2,3), c(2,3,4), xlab="points 1", ylab="points 2")
#colours
colors()  #shows all the colours defined by default in R
plot(c(1,2,3), c(2,3,4), col = "red")
#point style
plot(c(1,2,3), c(2,3,4), pch = 19)
plot(c(1,2,3), c(2,3,4), pch = 19, cex = 2)  #point size
#line style
plot(c(1,2,3), c(2,3,4), type = "l")  #line plot
plot(c(1,2,3), c(2,3,4), type = "b")  #line + points
plot(c(1,2,3), c(2,3,4), type = "o")  #plot points on top of the line
#lty can range from 1 to 6
plot(c(1,2,3), c(2,3,4), type = "o", lty = 1)
plot(c(1,2,3), c(2,3,4), type = "o", lty = 2)
plot(c(1,2,3), c(2,3,4), type = "o", lty = 1, lwd = 3)
#axis range
#normally R sets the range automatically, but you can set it manually
plot(c(1,2,3), c(2,3,4), xlim = c(0,5))
# Colour and point style
cols  <- c(rep('red',50), rep('blue',50), rep('green',50))
cols
types <- c(rep(1, 50), rep(2, 50), rep(3, 50))
types
plot(iris$Petal.Length, iris$Petal.Width,
main='Iris Petal Variability',
xlab='Petal Length (cm)', ylab='Petal Width (cm)',
col=cols, pch=types, cex.axis=1.5, cex.lab=1.5
)
# Adding a legend
legend('topleft', legend=c('I. setosa', 'I. versicolor', 'I. virginica'), col=c('red', 'blue', 'green'), pch=c(1,2,3))
x = 1:10
y = 10:1
{
plot(x,y, type = "n") #type n means empty plot
#abline() adds straight lines
abline(h=c(2.5,3,3.5), lty=2, lwd=2)  #adds horizontal dashed lines
#add points
points(x[y>5],y[y>5], col = "red", pch = 3)
points(x[y<=5],y[y<=5], col = "blue")
#add line
lines(x,y)
}
#abline() adds straight lines
abline(h=c(2.5,3,3.5), lty=2, lwd=2)  #adds horizontal dashed lines
{ #note: in notebooks, the regular plot window is not used, thus is not active. When legend is called, it will not know where the plot is, so surround code with {} to group all the commands together into one command
# Colour and point style
cols  <- c(rep('red',50), rep('blue',50), rep('green',50))
types <- c(rep(1, 50), rep(2, 50), rep(3, 50))
plot(iris$Petal.Length, iris$Petal.Width,
main='Iris Petal Variability',
xlab='Petal Length (cm)', ylab='Petal Width (cm)',
col=cols, pch=types, cex.axis=1.5, cex.lab=1.5
)
# Adding a legend
legend('topleft', legend=c('I. setosa', 'I. versicolor', 'I. virginica'), col=c('red', 'blue', 'green'), pch=c(1,2,3))
}
#R creates a new plot with each call to plot(). Other functions allow you to add plot components to an existing plot
x = 1:10
y = 10:1
{
plot(x,y, type = "n") #type n means empty plot
#abline() adds straight lines
abline(h=c(2.5,3,3.5), lty=2, lwd=2)  #adds horizontal dashed lines
#add points
points(x[y>5],y[y>5], col = "red", pch = 3)
points(x[y<=5],y[y<=5], col = "blue")
#add line
lines(x,y)
}
#remember: if you build a plot in stages in a notebook, you need to surround the code block with {}
#you can add a legend using legend() as in the previous example
?quadratic
??quadratic
?pch
x = poly(-50:50)
c = c(rep('red',49), rep('purple',1), rep('green',50))
plot(x, col = c, pch = 16)
x = poly(-50:50)
c = c(rep('red',49), rep('purple',1), rep('blue',49))
plot(x, col = c, pch = 16)
x
x = -50:50
c = c(rep('red',49), rep('purple',1), rep('blue',49))
plot(x, col = c, pch = 16)
x = -50:50
c = c(rep('red',49), 'purple', rep('blue',49))
plot(x, col = c, pch = 16)
x
length(x<0)
x<0
sum(x<0)
x = -50:50
c = c(rep('red',50), 'purple', rep('blue',50))
plot(x, col = c, pch = 16)
x = -50:50
c = c(rep('red',50), 'purple', rep('blue',50))
plot(x, col = c, pch = 20)
3**2
x = -50:50
y = x**2
c = c(rep('red',50), 'purple', rep('blue',50))
plot(x, y, col = c, pch = 20)
all_markers_df = data.frame(matrix(nrow = 0, ncol = 12))
View(all_markers_df)
input_files = "C:/Users/peree/OneDrive/Desktop/CompBio_Code/all_features/areaperimeter_features/attached_feature_outputs"
markers = c("Cdc11", "Om45", "Sec21", "Spf1") # only those with wAS/woAS data
setwd(paste(input_files, "with_AreaShape", "Cdc11", sep = "/"))
clusters = naturalsort::naturalsort(list.files())
clusters
c = "normal_clusters_n12_per_cell_cluster-0.csv"
cluster_df = read.csv(c)
View(cluster_df)
mean(cluster_df$Area)
c('alex') + c('paria')
c(c('alex') + c('paria'))
c(c('alex'), c('paria'))
rep('alex', 12)
c('paria', rep(NA, 0))
area_markers_df = data.frame(matrix(nrow = 0, ncol = 13))
perimeter_markers_df = data.frame(matrix(nrow = 0, ncol = 13))
paste("Cluster", 0:12, sep = " ")
# Date: February 13, 2023
# Alex Daiejavad
#-------------------------------------------------------------------------------
library(naturalsort)
input_files = "C:/Users/peree/OneDrive/Desktop/CompBio_Code/all_features/areaperimeter_features/attached_feature_outputs"
markers = c("Cdc11", "Om45", "Sec21", "Spf1") # only those with wAS/woAS data
avg_area_perimeter = function(AS_data) {
area_markers_df = data.frame(matrix(nrow = 0, ncol = 13))
perimeter_markers_df = data.frame(matrix(nrow = 0, ncol = 13))
for (m in markers) {
setwd(paste(input_files, AS, m, sep = "/"))
clusters = naturalsort::naturalsort(list.files())
avg_area = c(m)
avg_perimeter = c(m)
for (c in clusters) {
cluster_df = read.csv(c)
avg_area = c(avg_area, mean(cluster_df$Area))
avg_perimeter = c(avg_perimeter, mean(cluster_df$Perimeter))
}
# In case length of vectors < 13
avg_area = c(avg_area, rep(NA, 13 - length(avg_area)))
avg_perimeter = c(avg_perimeter, rep(NA, 13 - length(avg_perimeter)))
area_markers_df = rbind(area_markers_df, avg_area)
perimeter_markers_df = rbind(perimeter_markers_df, avg_perimeter)
}
df_cols = c("Marker", paste("Cluster", 0:12, sep = " "))
colnames(area_markers_df) = df_cols
colnames(perimeter_markers_df) = df_cols
}
avg_area_perimeter = function(AS_data) {
all_markers_df = data.frame(matrix(nrow = 0, ncol = 13))
for (m in markers) {
setwd(paste(input_files, AS, m, sep = "/"))
clusters = naturalsort::naturalsort(list.files())
avg_area = c(paste(m, "Area", sep = " "))
avg_perimeter = c(paste(m, "Perimeter", sep = " "))
for (c in clusters) {
cluster_df = read.csv(c)
avg_area = c(avg_area, mean(cluster_df$Area))
avg_perimeter = c(avg_perimeter, mean(cluster_df$Perimeter))
}
# In case length of vectors < 13
avg_area = c(avg_area, rep(NA, 13 - length(avg_area)))
avg_perimeter = c(avg_perimeter, rep(NA, 13 - length(avg_perimeter)))
all_markers_df = rbind(area_markers_df, avg_area, avg_perimeter)
}
df_cols = c("Marker", paste("Cluster-Feature", 0:12, sep = " "))
colnames(all_markers_df) = df_cols
return(all_markers_df)
}
wAS = avg_area_perimeter("with_AreaShape")
avg_area_perimeter = function(AS_data) {
all_markers_df = data.frame(matrix(nrow = 0, ncol = 13))
for (m in markers) {
setwd(paste(input_files, AS_data, m, sep = "/"))
clusters = naturalsort::naturalsort(list.files())
avg_area = c(paste(m, "Area", sep = " "))
avg_perimeter = c(paste(m, "Perimeter", sep = " "))
for (c in clusters) {
cluster_df = read.csv(c)
avg_area = c(avg_area, mean(cluster_df$Area))
avg_perimeter = c(avg_perimeter, mean(cluster_df$Perimeter))
}
# In case length of vectors < 13
avg_area = c(avg_area, rep(NA, 13 - length(avg_area)))
avg_perimeter = c(avg_perimeter, rep(NA, 13 - length(avg_perimeter)))
all_markers_df = rbind(area_markers_df, avg_area, avg_perimeter)
}
df_cols = c("Marker", paste("Cluster-Feature", 0:12, sep = " "))
colnames(all_markers_df) = df_cols
return(all_markers_df)
}
wAS = avg_area_perimeter("with_AreaShape")
c("Marker-Feature", paste("Cluster-Feature", 0:12, sep = " "))
avg_area_perimeter = function(AS_data) {
all_markers_df = data.frame(matrix(nrow = 0, ncol = 13))
for (m in markers) {
setwd(paste(input_files, AS_data, m, sep = "/"))
clusters = naturalsort::naturalsort(list.files())
avg_area = c(paste(m, "Area", sep = " "))
avg_perimeter = c(paste(m, "Perimeter", sep = " "))
for (c in clusters) {
cluster_df = read.csv(c)
avg_area = c(avg_area, mean(cluster_df$Area))
avg_perimeter = c(avg_perimeter, mean(cluster_df$Perimeter))
}
# In case length of vectors < 13
avg_area = c(avg_area, rep(NA, 13 - length(avg_area)))
avg_perimeter = c(avg_perimeter, rep(NA, 13 - length(avg_perimeter)))
all_markers_df = rbind(area_markers_df, avg_area, avg_perimeter)
}
df_cols = c("Marker-Feature", paste("Cluster-Feature", 0:11, sep = " "))
colnames(all_markers_df) = df_cols
return(all_markers_df)
}
wAS = avg_area_perimeter("with_AreaShape")
View(wAS)
markers = c("Cdc11", "Om45", "Sec21", "Spf1") # only those with wAS/woAS data
avg_area_perimeter = function(AS_data) {
all_markers_df = data.frame(matrix(nrow = 0, ncol = 13))
for (m in markers) {
setwd(paste(input_files, AS_data, m, sep = "/"))
clusters = naturalsort::naturalsort(list.files())
avg_area = c(paste(m, "Area", sep = " "))
avg_perimeter = c(paste(m, "Perimeter", sep = " "))
for (c in clusters) {
cluster_df = read.csv(c)
avg_area = c(avg_area, mean(cluster_df$Area))
avg_perimeter = c(avg_perimeter, mean(cluster_df$Perimeter))
}
# In case length of vectors < 13
avg_area = c(avg_area, rep(NA, 13 - length(avg_area)))
avg_perimeter = c(avg_perimeter, rep(NA, 13 - length(avg_perimeter)))
all_markers_df = rbind(area_markers_df, avg_area, avg_perimeter)
}
df_cols = c("Marker-Feature", paste("Cluster-Feature", 0:11, sep = " "))
colnames(all_markers_df) = df_cols
return(all_markers_df)
}
wAS = avg_area_perimeter("with_AreaShape")
View(wAS)
avg_area_perimeter = function(AS_data) {
all_markers_df = data.frame(matrix(nrow = 0, ncol = 13))
for (m in markers) {
setwd(paste(input_files, AS_data, m, sep = "/"))
clusters = naturalsort::naturalsort(list.files())
avg_area = c(paste(m, "Area", sep = " "))
avg_perimeter = c(paste(m, "Perimeter", sep = " "))
for (c in clusters) {
cluster_df = read.csv(c)
avg_area = c(avg_area, mean(cluster_df$Area))
avg_perimeter = c(avg_perimeter, mean(cluster_df$Perimeter))
}
# In case length of vectors < 13
avg_area = c(avg_area, rep(NA, 13 - length(avg_area)))
avg_perimeter = c(avg_perimeter, rep(NA, 13 - length(avg_perimeter)))
all_markers_df = rbind(all_markers_df, avg_area, avg_perimeter)
}
df_cols = c("Marker-Feature", paste("Cluster-Feature", 0:11, sep = " "))
colnames(all_markers_df) = df_cols
return(all_markers_df)
}
wAS = avg_area_perimeter("with_AreaShape")
View(wAS)
