#------------------------------------SLIMMING GO IDS----------------------------
go_data = read.delim(file = 'C:/Users/peree/OneDrive/Desktop/CompBio_Code/QuickGO-annotations-1663870262043-20220922.tsv')
View(go_data)
go_data = go_data[ ,c(3,4)]
View(go_data)
sample_file = read.csv(file = 'C:/Users/peree/OneDrive/Desktop/CompBio_Code/Cdc11_normal-0_ordered_enrichment.xlsx')
View(sample_file)
#------------------------------------SLIMMING GO IDS----------------------------
go_data_cc = read.delim(file = 'C:/Users/peree/OneDrive/Desktop/CompBio_Code/QuickGO-annotations-1663870262043-20220922.tsv')
go_data_cc = go_data[ ,c(3,4)]
sample_file = read.csv(file = 'C:/Users/peree/OneDrive/Desktop/CompBio_Code/Cdc11_normal-0_ordered_enrichment.xlsx')
sample_file = openxlsx::read.xlsx(file = 'C:/Users/peree/OneDrive/Desktop/CompBio_Code/Cdc11_normal-0_ordered_enrichment.xlsx')
sample_file = openxlsx::read.xlsx(xlsxFile = 'C:/Users/peree/OneDrive/Desktop/CompBio_Code/Cdc11_normal-0_ordered_enrichment.xlsx')
View(sample_file)
View(sample_file)
sample_file = dplyr::filter(sample_file$source == 'GO:CC')
sample_file$source
sample_file$source == 'GO:CC'
sample_file = dplyr::filter(sample_file$source == 'GO:CC')
sample_file = dplyr::filter(sample_file, sample_file$source == 'GO:CC')
View(sample_file)
sample_file = openxlsx::read.xlsx(xlsxFile = 'C:/Users/peree/OneDrive/Desktop/CompBio_Code/Cdc11_normal-0_ordered_enrichment.xlsx') %>%
dplyr::filter(sample_file, sample_file$source == 'GO:CC')
sample_file = openxlsx::read.xlsx(xlsxFile = 'C:/Users/peree/OneDrive/Desktop/CompBio_Code/Cdc11_normal-0_ordered_enrichment.xlsx') %>%
dplyr::filter(sample_file, sample_file$source == 'GO:CC')
sample_file = sample_file[ , 14]
sample_file = openxlsx::read.xlsx(xlsxFile = 'C:/Users/peree/OneDrive/Desktop/CompBio_Code/Cdc11_normal-0_ordered_enrichment.xlsx')
sample_file = dplyr::filter(sample_file, sample_file$source == 'GO:CC')
View(sample_file)
sample_file = sample_file[ , c(9, 11, 14)]
View(sample_file)
View(go_data)
View(go_data_cc)
#------------------------------------SLIMMING GO IDS----------------------------
go_data_cc = read.delim(file = 'C:/Users/peree/OneDrive/Desktop/CompBio_Code/QuickGO-annotations-1663870262043-20220922.tsv')
go_data_cc = go_data[ ,c(3,4)]
go_data_cc = go_data_cc[ ,c(3,4)]
a = list()
a = append(list, c(1, 2, 3))
a
b = c(1, 2, 3)
c = c(4, 5, 6)
a = list
a[[b]]
a = a[[b]]
c(a, list(b))
a = c(a, list(b))
a
a = list()
a
a = c(a, as.list(b))
a
a = list()
a = append(a, list(b))
a = append(a, list(c))
a
sample_file[1]
View(sample_file)
i = 0
parent_go = sample_file[i, 3]
i = 1
parent_go = sample_file[i, 3]
for (x in parent_go) {print(x)}
parent_go = stringr::str_split(parent_go, ",")
View(parent_go)
parent_go
for (x in parent_go) {print(x)}
parent_go = stringr::str_split(parent_go, ",")[[1]]
parent_go
parent_go = sample_file[i, 3]
stringr::str_split(parent_go, ",")
stringr::str_split(parent_go, ",")[[1]]
parent_go = sample_file[i, 3]
parent_go = stringr::str_split(parent_go, ",")[[1]]
parent_go
parent_go = sample_file[i, 3]
parent_go = stringr::str_split(parent_go, ", ")[[1]]
parent_go
id = "GO:0005634"
View(go_data_cc)
id %in% go_data_cc$SLIMMED.FROM
sample_file = openxlsx::read.xlsx(xlsxFile = 'C:/Users/peree/OneDrive/Desktop/CompBio_Code/Cdc11_normal-0_ordered_enrichment.xlsx')
sample_file = dplyr::filter(sample_file, sample_file$source == 'GO:CC')
sample_file_subset = sample_file[ , c(9, 11, 14)]
for (i in 1:nrow(sample_file_subset)) {
parent_go = sample_file[i, 3]
parent_go = stringr::str_split(parent_go, ", ")[[1]]
for (id in parent_go) {
}
}
slimmed_list = list()
slimmed_list = append(slimmed_list, list(""))
slimmed_list
slimmed_list = list()
test_data = sample_file_subset
id
parent_go
i
i = 1
parent_go = sample_file_subset[i, 3]
parent_go = stringr::str_split(parent_go, ", ")[[1]]
parent_go
View(sample_file_subset)
id = "GO:0005634"
View(test_data)
test_data = go_data_cc
test_data = dplyr::filter(test_data, test_data$SLIMMED.FROM == id)
View(test_data)
test_data = unique(test_data)
View(test_data)
test_data = go_data_cc
test_data = dplyr::filter(test_data, test_data$SLIMMED.FROM == id)
View(test_data)
parent_go
id='GO:0032991'
test_data = go_data_cc
test_data = dplyr::filter(test_data, test_data$SLIMMED.FROM == id)
View(test_data)
test_data = go_data_cc
test_data = dplyr::filter(test_data, test_data$SLIMMED.FROM == 'GO:0110165')
View(test_data)
test_data = go_data_cc
test_data = dplyr::filter(test_data, test_data$SLIMMED.FROM == 'GO:0030880')
test_data = go_data_cc
test_data = dplyr::filter(test_data, test_data$SLIMMED.FROM == 'GO:0032991')
?unique
intersect(test_data$SLIMMED.FROM, sample_file_subset$parents)
?intersect
a = (1, 2, 3)
a = c(1, 2, 3)
b = c(3, 4, 5)
intersect(a, b)
intersect(test_data$SLIMMED.FROM, sample_file_subset$term_id)
intersect(test_data$GO.TERM, sample_file_subset$term_id)
intersect(test_data$GO.TERM, sample_file_subset$parents)
test_data$GO.TERM
intersect(go_data_cc$SLIMMED.FROM, sample_file_subset$parents)
intersect(go_data_cc$SLIMMED.FROM, sample_file_subset$term_id)
nrows(go_data_cc$SLIMMED.FROM)
nrow(go_data_cc$SLIMMED.FROM)
nrow(go_data_cc)
nrows(sample_file_subset)
nrow(sample_file_subset)
compartments = c("cell cortex", "cell wall", "cellular bud", "cellular_component", "chromosome",
"cytoplasm", "cytoplasmic vesicle", "cytoskeleton",
"endomembrane system", "endoplasmic reticulum", "extracellular region", "Golgi apparatus",
"membrane", "microtubule organizing center",
"mitochondrial envelope", "mitochondrion", "nucleolus", "nucleus", "other",
"peroxisome", "plasma membrane", "ribosome", "site of polarized growth",
"vacuole")
length(compartments)
processes = sort(c('RNA splicing', 'mRNA processing', 'biological_process',
'cellular respiration', 'generation of precursor metabolites and energy',
'nucleobase-containing small molecule metabolic process', 'DNA recombination',
'ion transport', 'transmembrane transport', 'mitochondrial translation',
'mitochondrion organization', 'other', 'protein targeting',
'transcription from RNA polymerase III promoter', 'endosomal transport',
'cytoskeleton organization', 'regulation of organelle organization',
'regulation of translation', 'translational elongation', 'cytoplasmic translation',
'nuclear transport', 'protein folding',
'protein modification by small protein conjugation or removal',
'proteolysis involved in cellular protein catabolic process', 'Golgi vesicle transport',
'lipid metabolic process', 'nucleus organization', 'protein dephosphorylation',
'lipid transport', 'protein complex biogenesis', 'chromatin organization',
'cellular amino acid metabolic process', 'DNA replication',
'carbohydrate metabolic process', 'histone modification',
'regulation of DNA metabolic process', 'response to heat',
'transcription from RNA polymerase II promoter', 'DNA repair',
'cellular response to DNA damage stimulus', 'response to chemical',
'response to oxidative stress', 'chromosome segregation', 'mitotic cell cycle',
'organelle fission', 'regulation of cell cycle', 'protein phosphorylation',
'cell wall organization or biogenesis', 'meiotic cell cycle', 'sporulation',
'RNA modification', 'cell budding', 'tRNA processing',
'DNA-templated transcription, elongation', 'RNA catabolic process',
'nucleobase-containing compound transport', 'protein glycosylation', 'signaling',
'rRNA processing', 'ribosomal large subunit biogenesis', 'conjugation',
'endocytosis', 'organelle assembly', 'ribosomal small subunit biogenesis',
'ribosome assembly', 'response to osmotic stress', 'organelle inheritance',
'exocytosis', 'membrane fusion', 'organelle fusion', 'vesicle organization',
'regulation of protein modification process', 'snoRNA processing',
'translational initiation', 'response to starvation', 'cofactor metabolic process',
'monocarboxylic acid metabolic process', 'vacuole organization', 'cytokinesis',
'DNA-templated transcription, termination', 'protein maturation',
'peptidyl-amino acid modification', 'protein acylation', 'peroxisome organization',
'invasive growth in response to glucose limitation', 'pseudohyphal growth',
'ribosomal subunit export from nucleus', 'protein alkylation', 'telomere organization',
'cell morphogenesis', 'regulation of transport', 'DNA-templated transcription, initiation',
'transcription from RNA polymerase I promoter', 'transposition',
'vitamin metabolic process', 'tRNA aminoacylation for protein translation',
'oligosaccharide metabolic process', 'protein lipidation',
'cellular ion homeostasis', 'amino acid transport', 'carbohydrate transport',
'not_yet_annotated'))
length(processes)
if (! requireNamespace("gprofiler2", quietly = TRUE)) {
install.packages("gprofiler2")
}
# Install and load packages
if (!requireNamespace("openxlsx", quietly = TRUE)) {
install.packages("openxlsx")
}
if (!requireNamespace("tidyverse", quietly = TRUE)) {
install.packages("tidyverse")
}
library(stringr)
library(naturalsort)
library(readxl)
library(dplyr)
library(openxlsx)
library(ggplot2)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
a = c(1, 2, 4)
b = c(1, 3, 4)
intersect(a,b)
setwd('C:/Users/peree/OneDrive/Desktop/CompBio_Code')
ordered_dir = 'C:/Users/peree/OneDrive/Desktop/CompBio_Code/fun_enrich_files/per_marker_ordered_custom_bg/outputs_slim/'
unordered_dir = 'C:/Users/peree/OneDrive/Desktop/CompBio_Code/fun_enrich_files/per_marker_unordered_custom_bg/outputs_slim/'
# data splits
split_AS = c('with_areashape', 'without_areashape')
# obtain files that are for cc or bp enrichment data only
aspect_files = function(files, aspect) {
af = c()
for (f in files) {
a = stringr::str_split(f, "_")[[1]][5]
a = stringr::str_split(a, "\\.")[[1]][1]
if (a == aspect) {af = append(af, f)}
}
return(af)
}
# ensure that vector 1 and vector 2 are of the same length by adding the necessary
# number of NAs to the shorter vector
equal_length = function(vec1, vec2, max_length) {
# one or both of these will be 0
diff_vec1 = max_length - length(vec1)
diff_vec2 = max_length - length(vec2)
vec1 = append(vec1, rep(NA, diff_vec1))
vec2 = append(vec2, rep(NA, diff_vec2))
return(data.frame(vec1, vec2)) # return vec1 and vec2 next to each other as df
}
# given vector of ordered and unordered enrichment files for the same marker,
# return the cluster *numbers* that are present in both ordered and unordered
# enrichments
common_clusters = function(vec1, vec2) {
vec1_cluster_nums = c()
vec2_cluster_nums = c()
for (f in vec1) {
cluster = stringr::str_split(f, "_")[[1]][2]
cluster_num = stringr::str_split(cluster, "-")[[1]][2]
vec1_cluster_nums = append(vec1_cluster_nums, cluster_num)
}
for (f in vec2) {
cluster = stringr::str_split(f, "_")[[1]][2]
cluster_num = stringr::str_split(cluster, "-")[[1]][2]
vec2_cluster_nums = append(vec2_cluster_nums, cluster_num)
}
# intersect() returns the common elements between two vectors
return(intersect(vec1_cluster_nums, vec2_cluster_nums))
}
# given the vector containing cluster numbers seen in both ordered and unordered
# enrichment data, get a vector containing the relevant files pertaining to these
# cluster numbers (run function twice -- once with all ordered files, once with
# all unordered files)
common_files = function(file_names, common_cluster_nums) {
vec_clusters = c()
for (f in file_names) {
cluster_num = stringr::str_split(stringr::str_split(f, "_")[[1]][2], "-")[[1]][2]
if (cluster_num %in% common_cluster_nums) {vec_clusters = append(vec_clusters, f)}
}
return(vec_clusters)
}
# get human-readable marker-cluster identifier given file name and whether it
# contains ordered/unordered data
f_identifier = function(file_name, order_type) {
marker = stringr::str_split(file_name, "_")[[1]][1]
cluster = stringr::str_split(file_name, "_")[[1]][2]
cluster_num = stringr::str_split(cluster, "-")[[1]][2]
id = paste(marker, cluster_num, order_type, sep = "_")
return(id)
}
# create the excel file combining ordered and unordered enrichment terms for
# each marker-cluster
direct_comparison = function(aspect, AS, col_length) {
comparison_df = data.frame(misc = c(rep(NA, col_length))) # df skeleton
# directories containing enrichment data
ordered_as = paste(ordered_dir, AS, sep = "")
unordered_as = paste(unordered_dir, AS, sep = "")
# get all markers (different between wAS and woAS)
markers = list.files(ordered_as)
for (marker in markers) {
# directories leading to enrichment data for each marker
ordered_marker = paste(ordered_as, "/", marker, sep = "")
unordered_marker = paste(unordered_as, "/", marker, sep = "")
# get all file names
ordered_marker_files = naturalsort::naturalsort(list.files(ordered_marker))
unordered_marker_files = naturalsort::naturalsort(list.files(unordered_marker))
# get file names containing only bp or cc data
ordered_aspect_files = aspect_files(ordered_marker_files, aspect)
unordered_aspect_files = aspect_files(unordered_marker_files, aspect)
# get file names only containing data for clusters seen in both ordered and
# unordered datasets
common_cluster_nums = common_clusters(ordered_aspect_files, unordered_aspect_files)
common_ordered_files = common_files(ordered_aspect_files, common_cluster_nums)
common_unordered_files = common_files(unordered_aspect_files, common_cluster_nums)
for (i in 1:length(common_cluster_nums)) { # for each cluster...
# load its ordered and unordered enrichment data
ordered_f = paste(ordered_marker, "/", common_ordered_files[i], sep = "")
unordered_f = paste(unordered_marker, "/", common_unordered_files[i], sep = "")
# only save term_name column
ordered_terms = sort(readxl::read_excel(path = ordered_f)$term_name)
unordered_terms = sort(readxl::read_excel(path = unordered_f)$term_name)
# create a df containing the ordered and unordered enrichments together,
# made to have the same length using NA values
mini_df = equal_length(ordered_terms, unordered_terms, col_length)
col_names = c(f_identifier(common_ordered_files[i], 'ordered'), f_identifier(common_unordered_files[i], 'unordered'))
colnames(mini_df) = col_names
comparison_df = cbind(comparison_df, mini_df) # add df to master df
}
}
return(comparison_df[ ,2:(ncol(comparison_df))]) # ignore first column; just placeholder
}
cc_wAS = direct_comparison('cc', 'with_areashape', 30)
cc_woAS = direct_comparison('cc', 'without_areashape', 30)
bp_wAS = direct_comparison('bp', 'with_areashape', 102)
bp_woAS = direct_comparison('bp', 'without_areashape', 102)
View(cc_wAS)
sheet_names_cc = list('With_AreaShape' = cc_wAS, 'Without_AreaShape' = cc_woAS)
openxlsx::write.xlsx(sheet_names_cc, file = 'fun_enrich_comparisons_cc_custom_bg.xlsx')
sheet_names_bp = list('With_AreaShape' = bp_wAS, 'Without_AreaShape' = bp_woAS)
openxlsx::write.xlsx(sheet_names_bp, file = 'fun_enrich_comparisons_bp_custom_bg.xlsx')
if (!requireNamespace("ActivePathways", quietly = TRUE)) {
install.packages("ActivePathways")
}
if (!requireNamespace("rWikiPathways", quietly = TRUE)) {
install.packages("rWikiPathways")
}
library(ActivePathways)
library(rWikiPathways)
install.packages("rWikiPathways")
library(rWikiPathways)
setwd("C:/Users/peree/OneDrive/Desktop/CompBio_Code/fun_enrich_files/mapping_files")
DIRECTORY = "C:/Users/peree/OneDrive/Desktop/CompBio_Code/fun_enrich_files/mapping_files"
list.files
list.files()
# ----------------------------- Load JSON Files -------------------------------
yeast_g20 = read.csv(file = "C:/Users/peree/OneDrive/Desktop/CompBio_Code/fun_enrich_files/mapping_files/group19_2022_AD.xlsx.json")
# ----------------------------- Load JSON Files -------------------------------
yeast_g20 = read.csv(file = "C:/Users/peree/OneDrive/Desktop/CompBio_Code/fun_enrich_files/mapping_files/group19_2022_AD.xlsx")
# ----------------------------- Load JSON Files -------------------------------
yeast_g20 = read.csv(file = "C:/Users/peree/OneDrive/Desktop/CompBio_Code/fun_enrich_files/mapping_files/group19_2022_AD.xlsx")
View(yeast_g20)
# ----------------------------- Load JSON Files -------------------------------
yeast_g20 = openxlsx::read.xlsx(file = "C:/Users/peree/OneDrive/Desktop/CompBio_Code/fun_enrich_files/mapping_files/group19_2022_AD.xlsx")
# ----------------------------- Load JSON Files -------------------------------
yeast_g20 = openxlsx::read.xlsx("C:/Users/peree/OneDrive/Desktop/CompBio_Code/fun_enrich_files/mapping_files/group19_2022_AD.xlsx")
View(yeast_g20)
View(yeast_g20)
# ----------------------------- Load JSON Files -------------------------------
yeast_g20 = openxlsx::read.xlsx("C:/Users/peree/OneDrive/Desktop/CompBio_Code/fun_enrich_files/mapping_files/group19_2022_AD.xlsx")
View(yeast_g20)
# ----------------------------- Load JSON Files -------------------------------
yeast_g20 = openxlsx::read.xlsx("C:/Users/peree/OneDrive/Desktop/CompBio_Code/fun_enrich_files/mapping_files/group19_2022_AD.xlsx")
View(yeast_g20)
# ----------------------------- Load JSON Files -------------------------------
yeast_g20 = openxlsx::read.xlsx("C:/Users/peree/OneDrive/Desktop/CompBio_Code/fun_enrich_files/mapping_files/G20_Costanzo_AD.xlsx")
View(yeast_g20)
library(dplyr)
terms = unique(yeast_g20$Term.name)
terms
term = "peroxisome"
sub_df = dplyr::filter(yeast_g20, yeast_g20$Term.name == term)
View(sub_df)
id = sub_df[1, 1]
name = term
genes = sub_df$ORF
term_list = list(id = id, name = name, genes = genes)
View(term_list)
gmt_object = append(gmt_object, list(term_list))
gmt_object = list()
list_names = c()
gmt_object = append(gmt_object, list(term_list))
list_names = append(list_names, name)
gmt_object = list()
list_names = c()
terms = unique(yeast_g20$Term.name)
for (term in terms) {
sub_df = dplyr::filter(yeast_g20, yeast_g20$Term.name == term)
id = sub_df[1, 1]
name = term
genes = sub_df$ORF
term_list = list(id = id, name = name, genes = genes)
gmt_object = append(gmt_object, list(term_list))
list_names = append(list_names, name)
}
names(gmt_object) = list_names
View(gmt_object)
list_names = c()
gmt_object = list()
list_names = c()
terms = unique(yeast_g20$Term.name)
names(gmt_object) = terms
gmt_object = list()
list_names = c()
terms = unique(yeast_g20$Term.name)
for (term in terms) {
sub_df = dplyr::filter(yeast_g20, yeast_g20$Term.name == term)
id = sub_df[1, 1]
name = term
genes = sub_df$ORF
term_list = list(id = id, name = name, genes = genes)
gmt_object = append(gmt_object, list(term_list))
list_names = append(list_names, name)
}
names(gmt_object) = list_names
View(gmt_object)
write.table(gmt_object, file = 'G20_annotations.gmt', append = FALSE, sep = "\t",
quote = FALSE, row.names = FALSE, col.names = FALSE)
gmt_object = data.frame(id = NA, name = NA, genes = NA)
terms = unique(yeast_g20$Term.name)
xlsx_to_GMT_df = function(xlsx_file) {
gmt_object = data.frame(id = NA, name = NA, genes = NA)
terms = unique(yeast_g20$Term.name)
for (term in terms) {
sub_df = dplyr::filter(yeast_g20, yeast_g20$Term.name == term)
id = sub_df[1, 1]
name = term
genes = paste(sub_df$ORF, collapse = "\t")
gmt_object = rbind(gmt_object, c(id, name, genes))
}
return(gmt_object[2:nrow(gmt_object), ])
}
gmt_df = xlsx_to_GMT_df(yeast_g20)
View(gmt_df)
write.table(gmt_object, file = 'G20_annotations.gmt', append = FALSE, sep = "\t",
quote = FALSE, row.names = FALSE, col.names = FALSE)
my_gmt = ActivePathways::read.GMT(file = 'C:/Users/peree/OneDrive/Desktop/CompBio_Code/fun_enrich_files/mapping_files/G20_annotations.gmt')
ActivePathways::is.GMT(my_gmt)
library(ActivePathways)
library(rWikiPathways)
library(openxlsx)
library(dplyr)
setwd("C:/Users/peree/OneDrive/Desktop/CompBio_Code/fun_enrich_files/mapping_files")
DIRECTORY = "C:/Users/peree/OneDrive/Desktop/CompBio_Code/fun_enrich_files/mapping_files"
xlsx_to_GMT_df = function(xlsx_file_path) {
yeast_g20 = openxlsx::read.xlsx(xlsx_file_path)
gmt_object = data.frame(id = NA, name = NA, genes = NA)
terms = unique(yeast_g20$Term.name)
for (term in terms) {
sub_df = dplyr::filter(yeast_g20, yeast_g20$Term.name == term)
id = sub_df[1, 1]
name = term
genes = paste(sub_df$ORF, collapse = "\t")
gmt_object = rbind(gmt_object, c(id, name, genes))
}
return(gmt_object[2:nrow(gmt_object), ])
}
gmt_df = xlsx_to_GMT_df("C:/Users/peree/OneDrive/Desktop/CompBio_Code/fun_enrich_files/mapping_files/G20_Costanzo_AD.xlsx")
View(gmt_df)
write.table(gmt_df, file = 'G20_annotations.gmt', append = FALSE, sep = "\t",
quote = FALSE, row.names = FALSE, col.names = FALSE)
my_gmt = ActivePathways::read.GMT(file = 'C:/Users/peree/OneDrive/Desktop/CompBio_Code/fun_enrich_files/mapping_files/G20_annotations.gmt')
ActivePathways::is.GMT(my_gmt)
